package codegen_test

import (
	"testing"

	"github.com/alexgarzao/poj/codegen"
	"github.com/stretchr/testify/assert"
)

func TestJASM_CompleteBasicTest(t *testing.T) {
	assert := assert.New(t)

	j := codegen.NewJASM()
	assert.Empty(j.Code())

	j.StartMainClass("XPTO")
	expected := "// Code generated by POJ 0.1\npublic class XPTO {\n"
	assert.Equal(expected, j.Code())

	j.StartMainBlock()
	expected += "\tpublic static main([java/lang/String)V {\n"
	assert.Equal(expected, j.Code())

	j.NewConstantString("\"param1\"")
	expected += "\t\tldc \"param1\"\n"
	assert.Equal(expected, j.Code())

	j.FinishMainClass()
	expected += "\t\treturn\n"
	expected += "\t}\n"
	expected += "}\n"
	assert.Equal(expected, j.Code())
}

func TestJASM_HelloWorld(t *testing.T) {
	assert := assert.New(t)

	j := codegen.NewJASM()
	j.StartMainClass("HelloWorld")
	j.StartMainBlock()
	j.StartProcedureStatement("writeln")
	j.StartParameter()
	j.NewConstantString("\"Hello, World\"")
	j.FinishParameter()
	j.FinishProcedureStatement()
	j.FinishMainClass()
	expected := `// Code generated by POJ 0.1
public class HelloWorld {
	public static main([java/lang/String)V {
		getstatic java/lang/System.out java/io/PrintStream
		ldc "Hello, World"
		invokevirtual java/io/PrintStream.print(java/lang/String)V
		getstatic java/lang/System.out java/io/PrintStream
		invokevirtual java/io/PrintStream.println()V
		return
	}
}
`
	assert.Equal(expected, j.Code())
}
