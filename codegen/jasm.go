package codegen

import (
	"fmt"
	"strings"
)

type JASM struct {
	code string
	tabs string
}

func NewJASM() *JASM {
	return &JASM{}
}

func (j *JASM) StartMainClass(name string) {
	j.addLine("// Code generated by POJ 0.1")
	j.addLine(fmt.Sprintf("public class %s {", name))
	j.incTab()
}

func (j *JASM) FinishMainClass() {
	j.decTab()
	j.addLine("}")
}

func (j *JASM) StartMain() {
	j.addLine("public static main([java/lang/String)V {")
	j.incTab()
}

func (j *JASM) AddOpcode(opcode string, parameters ...string) {
	params := strings.Join(parameters, " ")

	j.addLine(fmt.Sprintf("%s %s", opcode, params))
}

func (j *JASM) FinishMain() {
	j.addLine("return")
	j.decTab()
	j.addLine("}")
}

func (j *JASM) Code() string {
	return j.code
}

func (j *JASM) addLine(line string) {
	j.code += fmt.Sprintf("%s%s\n", j.tabs, line)
}

func (j *JASM) incTab() {
	j.tabs += "\t"
}

func (j *JASM) decTab() {
	if len(j.tabs) == 0 {
		return
	}

	j.tabs = j.tabs[:len(j.tabs)-1]
}
